class HashTable:
    def _init_(self, size):
        self.size = size
        self.table = [[] for _ in range(size)]

    def _hash(self, key):
        # Простой хеш (остаток от деления)
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        for i, (k, v) in enumerate(self.table[index]):
            if k == key:
                self.table[index][i] = (key, value)  # обновление
                return
        self.table[index].append((key, value))  # добавление новой пары

    def get(self, key):
        index = self._hash(key)
        for k, v in self.table[index]:
            if k == key:
                return v
        return None  # если ключ не найден

    def remove(self, key):
        index = self._hash(key)
        for i, (k, v) in enumerate(self.table[index]):
            if k == key:
                del self.table[index][i]
                return True
        return False  # если ключ не найден

# Пример использования
ht = HashTable(10)
ht.insert("apple", 1)
ht.insert("banana", 2)
ht.insert("orange", 3)

print(ht.get("banana"))  # Вывод: 2
ht.remove("apple")
print(ht.get("apple"))   # Вывод: None
//_init_: Конструктор инициализирует хеш-таблицу заданного размера и создает список (массив) для хранения данных.
_hash: Метод для вычисления индекса хеш-таблицы. Используется встроенная функция hash, которая применяется к ключу.
insert: Метод для добавления элемента в хеш-таблицу. Если ключ уже существует, обновляется значение. Если нет, пара "ключ-значение" добавляется в соответствующий список.
get: Метод для получения значения по ключу. Возвращает None, если ключ не найден.
remove: Метод для удаления элемента по ключу. Возвращает True, если ключ был найден и удален, и False в противном случае.
