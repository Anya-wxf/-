Бинарный поиск - эффективный алгоритм поиска элемента в отсортированном массиве.
Временная сложность: O(log n)
Пространственная сложность: O(1) - для итеративного подхода, использует фиксированное кол-во дополнительных переменных, O(log n) - для рукурсивного подхода из-за стековых вызовов
Рекурсивная версия
def binary_search_recursive(arr, target, left, right):
    if left <= right:
        mid = left + (right - left) // 2  # Находим середину

        # Проверяем, равен ли элемент в середине искомому
        if arr[mid] == target:
            return mid  # Возвращаем индекс найденного элемента

        # Если элемент больше, продолжаем поиск в правой половине
        elif arr[mid] < target:
            return binary_search_recursive(arr, target, mid + 1, right)

        # Если элемент меньше, продолжаем поиск в левой половине
        else:
            return binary_search_recursive(arr, target, left, mid - 1)

    return -1  # Элемент не найден

//Пример использования
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 7
result = binary_search_recursive(arr, target, 0, len(arr) - 1)

if result != -1:
    print("Элемент найден по индексу:", result)
else:
    print("Элемент не найден")
//Начинаем с тех же параметров left и right, что и в итеративном варианте.
Если left больше right, возвращаем -1.
Находим середину и проверяем, равен ли элемент искомому. Если равен, возвращаем индекс.
Если элемент меньше, рекурсивно вызываем функцию для правой половины, если больше — для левой.
Эта версия создает дополнительные вызовы функций, что увеличивает стек вызовов до O(log n) в памяти. 
