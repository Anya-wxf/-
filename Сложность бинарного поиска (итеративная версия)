Бинарный поиск - эффективный алгоритм поиска элемента в отсортированном массиве.
Временная сложность: O(log n)
Пространственная сложность: O(1) - для итеративного подхода, использует фиксированное кол-во дополнительных переменных, O(log n) - для рукурсивного подхода из-за стековых вызовов
Итеративная версия
def binary_search(arr, target):
    left, right = 0, len(arr) - 1

    while left <= right:
        mid = left + (right - left) // 2  # Находим середину

        # Проверяем, равен ли элемент в середине искомому
        if arr[mid] == target:
            return mid  # Возвращаем индекс найденного элемента

        # Если элемент больше, игнорируем левую половину
        elif arr[mid] < target:
            left = mid + 1

        # Если элемент меньше, игнорируем правую половину
        else:
            right = mid - 1

    return -1  # Элемент не найден

//Пример использования
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
target = 7
result = binary_search(arr, target)

if result != -1:
    print("Элемент найден по индексу:", result)
else:
    print("Элемент не найден")
//Мы определяем начальные (left) и конечные (right) индексы для диапазона поиска.
В цикле while находим середину (mid) и сравниваем значение с искомым элементом (target).
Если элемент найден, возвращаем его индекс. Если значение mid меньше искомого, ищем в правой половине (сдвигаем left), иначе — в левой половине (сдвигаем right).
Если по окончании цикла элемент не найден, возвращаем -1.
