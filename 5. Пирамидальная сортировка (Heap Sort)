def heapify(arr, n, i):
    largest = i  # Инициализация максимального элемента как корня
    left = 2 * i + 1     # левый дочерний элемент
    right = 2 * i + 2    # правый дочерний элемент

    # Если левый дочерний элемент больше корня
    if left < n and arr[left] > arr[largest]:
        largest = left

    # Если правый дочерний элемент больше, чем самый большой на данный момент
    if right < n and arr[right] > arr[largest]:
        largest = right

    # Если самый большой элемент не корень
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # обмен

        # Рекурсивно heapify затронутое поддерево
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)

    # Построение кучи (перегруппировка массива)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Один за другим извлекаем элементы из кучи
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Перемещаем текущий корень в конец
        heapify(arr, i, 0)  # вызываем heapify на уменьшенной куче

//Пример использования
arr = [64, 34, 25, 12, 22, 11, 90]
heap_sort(arr)
print("Отсортированный массив:", arr)
Функция heapify:
Параметры: массив, размер кучи и индекс корня.
Устанавливает элемент в правильное положение в кучу, проверяя вершину и два дочерних элемента.
Если один из дочерних элементов больше, происходит обмен, и функция вызывается рекурсивно для дочернего элемента.
Функция heap_sort:
Создает кучу, преобразуя массив в структуру кучи с помощью цикла от n/2 - 1 до 0 (так как все элементы после n/2 
листья).
После формирования кучи, извлекает максимальный элемент из кучи (корень) и помещает его в конец массива.
Восстанавливает структуру кучи для оставшихся элементов, вызывая функцию heapify.
